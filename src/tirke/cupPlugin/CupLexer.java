/* The following code was generated by JFlex 1.4.3 on 18/02/16 19:44 */

package tirke.cupPlugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import static tirke.cupPlugin.psi.CupTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/02/16 19:44 from the specification file
 * <tt>/Users/Tirke/Downloads/Cup support/src/tirke/cupPlugin/CupLexer.flex</tt>
 */
public class CupLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\1\1\3\22\0\1\13\4\0\1\42"+
    "\4\0\1\12\1\0\1\16\1\0\1\17\1\11\12\5\1\7\1\4"+
    "\1\0\1\15\3\0\1\44\1\5\1\47\1\51\1\52\4\5\1\43"+
    "\4\5\1\50\6\5\1\45\4\5\4\0\1\46\1\0\1\22\1\5"+
    "\1\20\1\36\1\34\1\41\1\33\1\40\1\24\1\5\1\32\1\21"+
    "\1\25\1\35\1\27\1\26\1\5\1\30\1\23\1\31\2\5\1\37"+
    "\3\5\1\6\1\14\1\10\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\2\1\7\1\10\1\11\12\4\1\1\1\4"+
    "\3\0\1\12\3\0\16\4\1\0\1\4\1\0\1\13"+
    "\2\0\15\4\1\14\1\4\1\0\1\4\1\15\1\0"+
    "\1\12\1\4\1\16\1\17\1\4\1\20\3\4\1\21"+
    "\7\4\1\22\1\0\1\4\1\12\1\23\1\4\1\24"+
    "\5\4\1\25\3\4\1\26\1\4\1\27\1\30\1\31"+
    "\1\4\1\32\5\4\1\33\6\4\1\34\1\35\4\4"+
    "\1\15\1\36\1\4\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\126\0\53\0\201\0\254\0\327"+
    "\0\u0102\0\53\0\u012d\0\53\0\53\0\53\0\u0158\0\u0183"+
    "\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db"+
    "\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433"+
    "\0\u012d\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\53\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\53\0\u0a6a"+
    "\0\u0739\0\u0a95\0\201\0\201\0\u0ac0\0\201\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\201\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"+
    "\0\u0c6e\0\201\0\u0c99\0\u0cc4\0\53\0\201\0\u0cef\0\201"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\201\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\53\0\u0e72\0\201\0\201\0\201\0\u0e9d\0\201"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\201\0\u0f9f\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\201\0\201\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\201\0\201\0\u114d\0\201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\6\1\24\1\6\1\25"+
    "\1\26\3\6\1\27\1\6\1\30\2\6\1\31\1\32"+
    "\7\6\55\0\1\33\55\0\1\6\12\0\22\6\1\0"+
    "\10\6\7\0\1\34\52\0\1\35\54\0\1\36\1\37"+
    "\51\0\1\40\1\0\1\41\44\0\1\6\12\0\1\6"+
    "\1\42\5\6\1\43\12\6\1\0\10\6\5\0\1\6"+
    "\12\0\14\6\1\44\5\6\1\0\10\6\5\0\1\6"+
    "\12\0\1\45\21\6\1\0\10\6\5\0\1\6\12\0"+
    "\1\46\10\6\1\47\10\6\1\0\10\6\5\0\1\6"+
    "\12\0\5\6\1\50\7\6\1\51\4\6\1\0\10\6"+
    "\5\0\1\6\12\0\2\6\1\52\5\6\1\53\11\6"+
    "\1\0\10\6\5\0\1\6\12\0\4\6\1\54\15\6"+
    "\1\0\10\6\5\0\1\6\12\0\14\6\1\55\5\6"+
    "\1\0\10\6\5\0\1\6\12\0\7\6\1\56\12\6"+
    "\1\0\10\6\5\0\1\6\12\0\4\6\1\57\15\6"+
    "\1\0\10\6\26\0\1\60\31\0\1\6\12\0\22\6"+
    "\1\0\1\6\1\61\6\6\4\0\1\3\46\0\7\34"+
    "\1\62\43\34\15\0\1\63\35\0\2\36\1\0\50\36"+
    "\12\64\1\65\40\64\11\0\1\36\46\0\1\6\12\0"+
    "\2\6\1\66\17\6\1\0\10\6\5\0\1\6\12\0"+
    "\16\6\1\67\3\6\1\0\10\6\5\0\1\6\12\0"+
    "\21\6\1\70\1\0\10\6\5\0\1\6\12\0\11\6"+
    "\1\71\10\6\1\0\10\6\5\0\1\6\12\0\2\6"+
    "\1\72\17\6\1\0\10\6\5\0\1\6\12\0\2\6"+
    "\1\73\17\6\1\0\10\6\5\0\1\6\12\0\6\6"+
    "\1\74\13\6\1\0\10\6\5\0\1\6\12\0\4\6"+
    "\1\75\15\6\1\0\10\6\5\0\1\6\12\0\1\76"+
    "\7\6\1\77\11\6\1\0\10\6\5\0\1\6\12\0"+
    "\14\6\1\100\5\6\1\0\10\6\5\0\1\6\12\0"+
    "\13\6\1\101\6\6\1\0\10\6\5\0\1\6\12\0"+
    "\10\6\1\102\11\6\1\0\10\6\5\0\1\6\12\0"+
    "\15\6\1\103\4\6\1\0\10\6\5\0\1\6\12\0"+
    "\11\6\1\104\10\6\1\0\10\6\30\0\1\105\27\0"+
    "\1\6\12\0\22\6\1\0\2\6\1\106\5\6\7\34"+
    "\1\62\1\107\42\34\12\64\1\110\51\64\1\111\1\110"+
    "\40\64\5\0\1\6\12\0\3\6\1\112\16\6\1\0"+
    "\10\6\5\0\1\6\12\0\14\6\1\113\5\6\1\0"+
    "\10\6\5\0\1\6\12\0\11\6\1\114\10\6\1\0"+
    "\10\6\5\0\1\6\12\0\4\6\1\115\15\6\1\0"+
    "\10\6\5\0\1\6\12\0\15\6\1\116\4\6\1\0"+
    "\10\6\5\0\1\6\12\0\10\6\1\117\1\120\10\6"+
    "\1\0\10\6\5\0\1\6\12\0\7\6\1\121\12\6"+
    "\1\0\10\6\5\0\1\6\12\0\11\6\1\122\10\6"+
    "\1\0\10\6\5\0\1\6\12\0\12\6\1\123\7\6"+
    "\1\0\10\6\5\0\1\6\12\0\3\6\1\124\16\6"+
    "\1\0\10\6\5\0\1\6\12\0\1\125\21\6\1\0"+
    "\10\6\5\0\1\6\12\0\20\6\1\126\1\6\1\0"+
    "\10\6\5\0\1\6\12\0\5\6\1\127\14\6\1\0"+
    "\10\6\5\0\1\6\12\0\2\6\1\130\6\6\1\131"+
    "\10\6\1\0\10\6\5\0\1\6\12\0\20\6\1\132"+
    "\1\6\1\0\10\6\34\0\1\133\23\0\1\6\12\0"+
    "\22\6\1\0\1\6\1\134\6\6\11\64\1\135\1\110"+
    "\40\64\5\0\1\6\12\0\3\6\1\136\16\6\1\0"+
    "\10\6\5\0\1\6\12\0\7\6\1\137\12\6\1\0"+
    "\10\6\5\0\1\6\12\0\11\6\1\140\10\6\1\0"+
    "\10\6\5\0\1\6\12\0\4\6\1\141\15\6\1\0"+
    "\10\6\5\0\1\6\12\0\10\6\1\142\11\6\1\0"+
    "\10\6\5\0\1\6\12\0\2\6\1\143\17\6\1\0"+
    "\10\6\5\0\1\6\12\0\14\6\1\144\5\6\1\0"+
    "\10\6\5\0\1\6\12\0\14\6\1\145\5\6\1\0"+
    "\10\6\5\0\1\6\12\0\11\6\1\146\10\6\1\0"+
    "\10\6\5\0\1\6\12\0\4\6\1\147\15\6\1\0"+
    "\10\6\5\0\1\6\12\0\3\6\1\150\16\6\1\0"+
    "\10\6\5\0\1\6\12\0\14\6\1\151\5\6\1\0"+
    "\10\6\20\0\1\152\37\0\1\6\12\0\22\6\1\0"+
    "\3\6\1\153\4\6\5\0\1\6\12\0\15\6\1\154"+
    "\4\6\1\0\10\6\5\0\1\6\12\0\1\155\21\6"+
    "\1\0\10\6\5\0\1\6\12\0\11\6\1\156\10\6"+
    "\1\0\10\6\5\0\1\6\12\0\13\6\1\157\6\6"+
    "\1\0\10\6\5\0\1\6\12\0\10\6\1\160\11\6"+
    "\1\0\10\6\5\0\1\6\12\0\16\6\1\161\3\6"+
    "\1\0\10\6\5\0\1\6\12\0\15\6\1\162\4\6"+
    "\1\0\10\6\5\0\1\6\12\0\3\6\1\163\16\6"+
    "\1\0\10\6\5\0\1\6\12\0\10\6\1\164\11\6"+
    "\1\0\10\6\5\0\1\6\12\0\22\6\1\0\4\6"+
    "\1\165\3\6\5\0\1\6\12\0\14\6\1\166\5\6"+
    "\1\0\10\6\5\0\1\6\12\0\14\6\1\167\5\6"+
    "\1\0\10\6\5\0\1\6\12\0\2\6\1\170\17\6"+
    "\1\0\10\6\5\0\1\6\12\0\7\6\1\171\12\6"+
    "\1\0\10\6\5\0\1\6\12\0\5\6\1\172\14\6"+
    "\1\0\10\6\5\0\1\6\12\0\22\6\1\0\5\6"+
    "\1\173\2\6\5\0\1\6\12\0\15\6\1\174\4\6"+
    "\1\0\10\6\5\0\1\6\12\0\1\6\1\175\20\6"+
    "\1\0\10\6\5\0\1\6\12\0\1\176\21\6\1\0"+
    "\10\6\5\0\1\6\12\0\4\6\1\177\15\6\1\0"+
    "\10\6\5\0\1\6\12\0\22\6\1\0\6\6\1\200"+
    "\1\6\5\0\1\6\12\0\1\201\21\6\1\0\10\6"+
    "\5\0\1\6\12\0\15\6\1\202\4\6\1\0\10\6"+
    "\5\0\1\6\12\0\22\6\1\0\7\6\1\203\5\0"+
    "\1\6\12\0\14\6\1\204\5\6\1\0\10\6\5\0"+
    "\1\6\12\0\2\6\1\205\17\6\1\0\10\6\5\0"+
    "\1\6\12\0\1\6\1\206\20\6\1\0\10\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4472];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\4\1\1\11\1\1\3\11"+
    "\14\1\3\0\1\1\3\0\16\1\1\0\1\1\1\0"+
    "\1\11\2\0\17\1\1\0\1\1\1\11\1\0\22\1"+
    "\1\0\1\1\1\11\14\1\1\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CupLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return INIT;
          }
        case 32: break;
        case 22: 
          { return PERCENT_PREC;
          }
        case 33: break;
        case 8: 
          { return COMMA;
          }
        case 34: break;
        case 29: 
          { return NONASSOC;
          }
        case 35: break;
        case 21: 
          { return RIGHT;
          }
        case 36: break;
        case 16: 
          { return SCAN;
          }
        case 37: break;
        case 28: 
          { return TERMINAL;
          }
        case 38: break;
        case 10: 
          { return COMMENT;
          }
        case 39: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 40: break;
        case 7: 
          { return BAR;
          }
        case 41: break;
        case 4: 
          { return IDENTIFIER;
          }
        case 42: break;
        case 30: 
          { return PRECED;
          }
        case 43: break;
        case 26: 
          { return PARSER;
          }
        case 44: break;
        case 3: 
          { return SEMI;
          }
        case 45: break;
        case 12: 
          { return NON;
          }
        case 46: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 47: break;
        case 23: 
          { return ACTION;
          }
        case 48: break;
        case 5: 
          { return COLON;
          }
        case 49: break;
        case 11: 
          { return CCEQ;
          }
        case 50: break;
        case 13: 
          { return JAVA_CODE;
          }
        case 51: break;
        case 14: 
          { return CODE;
          }
        case 52: break;
        case 20: 
          { return START;
          }
        case 53: break;
        case 24: 
          { return STATIC;
          }
        case 54: break;
        case 31: 
          { return NONTERMINAL;
          }
        case 55: break;
        case 25: 
          { return IMPORT;
          }
        case 56: break;
        case 19: 
          { return CLASS;
          }
        case 57: break;
        case 15: 
          { return LEFT;
          }
        case 58: break;
        case 9: 
          { return DOT;
          }
        case 59: break;
        case 18: 
          { return WITH;
          }
        case 60: break;
        case 27: 
          { return PACKAGE;
          }
        case 61: break;
        case 6: 
          { return STAR;
          }
        case 62: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
